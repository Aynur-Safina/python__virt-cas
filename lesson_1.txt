# Comment
# print('Привет МИР')


x=5
y=3
print('Сумма = ', x + y)
print(f'Вычитание = {x-y}')
print(f'Умножение = {x *y}')
print(x /y) - деление
print(x//y) - целочисленное деление
# Нужно иметь в виду, что при делении отрицательных чисел округление будет осуществляться в меньшую сторону, т.е. в сторону числа, которое больше по модулю. Например, 10//3 = 3, но -10//3=-4

print(x**y)- возведение в степень
# Python - правоассоциативный язык, поэтому пр  одинаковых операция значения вычисляются справа налево. Например, x**y**z=x**(y**z)

print(x%y) - остаток от деления
# Если n < m, то  n % m= n. Например, 2 % 5= 2


_____________________________
ПРИОРИТЕТ ОПЕРАЦИЙ
______________________________
1. ( )
2. **
3. * , /, //, %
4. +, -

#x1 = int(input("Введите x1: "))
#x2 = int(input("Введите x2: "))
#print(x1 ** 2 + x2 ** 2)'''

name =input('Введите имя')
print("Привет", name)


          Обработка цифр числа
      ___________________________
При помощи операции нахождения остатка и целочисленного деления можно достаточно несложно вычислить любую цифру числа.

Рассмотрим программу получения цифр двузначного числа:

num = 17
a = num % 10
b = num // 10
print(a)
print(b)

Результатом выполнения программы будут два числа:
7
1

То есть сначала мы вывели последнюю цифру числа, а затем первую цифру.

Запомни: последняя цифра числа определяется всегда как остаток от деления числа на 10 (% 10). Чтобы отщепить последнюю цифру от числа, необходимо разделить его нацело на 10 (// 10).

Рассмотрим программу получения цифр трёхзначного числа:

num = 754
a = num % 10
b = (num % 100) // 10
c = num // 100
print(a)
print(b)
print(c)
Результатом выполнения программы будут три числа:
4
5
7

То есть сначала мы вывели последнюю цифру числа, затем среднюю цифру, а затем первую цифру.

Алгоритм получения цифр 
�
n-значного числа
Несложно понять, по какому алгоритму можно найти каждую цифру 
�
n-значного числа num:

Последняя цифра: (num % 101) // 100;
Предпоследняя цифра: (num % 102) // 101;
Предпредпоследняя цифра: (num % 103) // 102;
.....
Вторая цифра: (num % 10n-1) // 10n-2;
Первая цифра: (num % 10n) // 10n-1.


____________________________________________________
НЕОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ КОМАНДЫ PRINT(): SEP, END
_____________________________________________________
Аннотация. Урок посвящен изучению необязательных параметров команды print() и более детальному разбору понятия переменных. Также мы поговорим о комментариях и стандарте PEP 8, которого придерживаются Python-программисты.

Необязательные параметры команды print
По умолчанию команда print() принимает несколько аргументов (параметров), выводит их через один пробел, после чего ставит перевод строки. Это поведение можно изменить, используя необязательные именованные параметры sep (separator, разделитель) и end (окончание).

Параметр sep
Рассмотрим следующий код:

print('a', 'b', 'c')
print('d', 'e', 'f')
Результатом выполнения такого кода будет:

a b c
d e f
Рассмотрим следующий код: 

print('a', 'b', 'c', sep='*')
print('d', 'e', 'f', sep='**')
Результатом выполнения такого кода будет:

a*b*c
d**e**f
При первой печати в качестве строки разделителя между аргументами команды print() установлена строка sep='*'.

При второй печати в качестве строки разделителя между аргументами команды print() установлена строка sep='**'.

Таким образом, необязательный параметр sep команды print() позволяет установить строку, с помощью которой будут разделены аргументы при печати.

Параметр end
Если перевод строки делать не нужно или требуется указать специальное окончание, то следует явно указать значение для параметра end.

Рассмотрим следующий код:

print('a', 'b', 'c', end='@')
print('d', 'e', 'f', end='@@')
Результатом выполнения такого кода будет:

a b c@d e f@@
По завершении первой печати вставлена строка @ вместо перевода строки. Аналогично, по завершении второй печати вставлена строка @@.

Параметры sep и end можно использовать вместе. Рассмотрим следующий код:

print('a', 'b', 'c', sep='*', end='finish')
print('d', 'e', 'f', sep='**', end='^__^')
print('g', 'h', 'i', sep='+', end='%')
print('j', 'k', 'l', sep='-', end='#')
print('m', 'n', 'o', sep='/', end='!')

Результатом выполнения такого кода будет:
a*b*cfinishd**e**f^__^g+h+i%j-k-l#m/n/o!

Примечания
Примечание 1. Вызов команды print() с пустыми скобками ставит перевод строки.

Примечание 2. Последовательность символов \n называется управляющей последовательностью и задает перевод строки.

Примечание 3. Значения по умолчанию у параметров sep и end следующие:

sep=' '   # пробел
end='\n'  # перевод строки
Примечание 4. Чтобы убрать все дополнительные выводимые символы, можно вызывать команду print() так:

print('a', 'b', 'c', sep='', end='')
Примечание 5. Программный код

print('Python')
равнозначен коду

print('Python', end='\n')
 Примечание 6. Если после вывода данных нужно более одного перевода строки, то необходимо использовать следующий код:

print('Python', end='\n\n\n')


___________________________
СТАНДАРТ PEP 8
___________________________
 Полная версия стандарта:
 https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html

При оформлении программ мы будем пользоваться PEP 8 — 
Python Enhanced Proposal. Этот документ предлагает единый 
и общепринятый стиль написания программ на языке Python. 
Документ создан по рекомендациям Гвидо Ван Россума, автора Python.
 Прочесть его на русском языке можно по ссылке.

                Некоторые рекомендации PEP 8
Рекомендация 1. Избегайте использования пробелов перед 
открывающей скобкой, после которой начинается список аргументов 
функции.

Правильно:
print('Follow PEP8!')

Неправильно:
print ('Follow PEP8!')


Рекомендация 2. После запятой нужен пробел.

Правильно:
print('PEP8', 'Rocks!')

Неправильно:
print('PEP8','Rocks!')


Рекомендация 3. Не отделяйте пробелами знак «равно», 
когда он употребляется для обозначения значения параметра 
по умолчанию.

Правильно:
print('My name', 'is', 'Python', sep='**', end='+')

Неправильно:
print('My name', 'is', 'Python', sep = '**', end = '+')

                  Примечания
Примечание 1. Согласно стандарту PEP 8, комментарии должны отделяться хотя бы двумя пробелами от кода. Они должны начинаться с символа # и одного пробела.

Правильно:
# Далее будет напечатан текст
print('Comments in Python')  # Печать текста с помощью команды print.

Неправильно:
#Далее будет напечатан текст
print('Comments in Python')#Печать текста с помощью команды print.

Примечание 2. Длина строки не должна превышать 78 символов
